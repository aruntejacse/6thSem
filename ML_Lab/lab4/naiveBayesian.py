{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.9","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\n\ndf = pd.read_csv(\"../input/asasas/pima_indian.csv\")\nfeature_col_names = ['num_preg', 'glucose_conc', 'diastolic_bp',\n                     'thickness', 'insulin', 'bmi', 'diab_pred', 'age']\npredicted_class_names = ['diabetes']\n\nX = df[feature_col_names].values  # these are factors for the prediction\ny = df[predicted_class_names].values  # this is what we want to predict\n\n#splitting the dataset into train and test data\n\nxtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.33)\n\nprint('\\n the total number of Training Data :', ytrain.shape)\nprint('\\n the total number of Test Data :', ytest.shape)\n\n\n# Training Naive Bayes (NB) classifier on training data.\n\nclf = GaussianNB().fit(xtrain, ytrain.ravel())\npredicted = clf.predict(xtest)\npredictTestData = clf.predict([[6, 148, 72, 35, 0, 33.6, 0.627, 50]])\n\n#printing Confusion matrix, accuracy, Precision and Recall\n\nprint('\\n Confusion matrix')\nprint(metrics.confusion_matrix(ytest, predicted))\n\nprint('\\n Accuracy of the classifier is',\n      metrics.accuracy_score(ytest, predicted))\n\nprint('\\n The value of Precision', metrics.precision_score(ytest, predicted))\n\nprint('\\n The value of Recall', metrics.recall_score(ytest, predicted))\n\nprint(\"Predicted Value for individual Test Data:\", predictTestData)","metadata":{"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"\n the total number of Training Data : (514, 1)\n\n the total number of Test Data : (254, 1)\n\n Confusion matrix\n[[141  30]\n [ 34  49]]\n\n Accuracy of the classifier is 0.7480314960629921\n\n The value of Precision 0.620253164556962\n\n The value of Recall 0.5903614457831325\nPredicted Value for individual Test Data: [1]\n","output_type":"stream"}]}]}